Model, Vue, Controller

    Some conventions on MVC. 
    
    Table managements:
    
    1) the model->select_all method returns a list of hash.
    
    2) The metadata datatable:
        - add the header line
        - select the colomns
        - add the actions, checkbox selector, edit, delete
        - return a 2 dimentional array (array of array)
        
    3) the CodeIgniter table library should turn this array into an HTML table
    
    
    Form validation:
    ----------------
    
    Usual style for CodeIgniter is to have the same method to display the initial
    form and to validate it.
    
    the form_validation->run returns false when
        - nothing has been validated so the form should be displayed
        - an error has been detected so the form needs to be displayed again
        
    Difference between creation and edit:
        - creation is initialized with defaults
        - edit is initialized with existing data and an error should be handled on
        request to edit non existing data
        - when repopulating the form the set_value function is used
    
    Note that data preparation can be done by the validation rules.
    
    any function that takes one parameter and return a result can be used as a rule.
    
    In GVV, two methods: create and edit($id), with edit in mode write and read-only.
    There was a specific formValidation/$action ...
    
    what we could do:
        controller/create
        controller/edit/x
        controller/read/x   edit read only
    
    What to do on attempt of editing, reading non existing elements:
        goto list + popup error dialog.    
    
    Questions & Answers
    
    * In metadata programming where should I put the fields validation rules?
    
    In basic CI application, they are usually in the controllers. With metadata programming, somes of the rules
    are implied by the metadata type. So it is logical to have a rules($table, $field) in the metadata helper.
    However is is more flexible to keep the rues setting in the controllers (to add business rules).
    
    * Should I try to keep all data validation inside the model like on RoR?
    
    Advantage of this approach is that is that there is no way to insert incoherent data in the database.
    
    * Is it judicious to consider two data validation levels ?
        1) one form validation, just to check the syntax
        2) business rules validation
        
    The first one could be enforced on the client by javascript. In all cases, all data validation must be
    also done at the server levle for security reasons.
    
    
    
     
    
    